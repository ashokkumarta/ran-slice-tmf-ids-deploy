<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
          http://camel.apache.org/schema/spring
          http://camel.apache.org/schema/spring/camel-spring.xsd">

	<camel:sslContextParameters id="sslContext"
		certAlias="1.0.1">
		<camel:keyManagers keyPassword="password">
			<camel:keyStore resource="etc/subscriber-1.p12"
				password="password" />
		</camel:keyManagers>
		<camel:trustManagers>
			<camel:keyStore resource="etc/truststore.p12"
				password="password" />
		</camel:trustManagers>
	</camel:sslContextParameters>

	<bean id="ArtifactRequestCreationProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.ArtifactRequestCreationProcessor" />
	<bean id="ContractRequestCreationProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.ContractRequestCreationProcessor" />
	<bean id="ContractResponseProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.ContractResponseProcessor" />
	<bean id="TypeExtractionProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.IdsMessageTypeExtractionProcessor" />

	<bean id="TMFArtifactInitProcessor"
		class="tmf.ids.processors.TMFArtifactInitProcessor" />
	<bean id="TMFArtifactResponseProcessor"
		class="tmf.ids.processors.TMFArtifactResponseProcessor" />
	<bean id="TMFContractInitProcessor"
		class="tmf.ids.processors.TMFContractInitProcessor" />

	<bean id="ContractRequestProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.ContractRequestProcessor" />
	<bean id="ContractAgreementReceiverProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.ContractAgreementReceiverProcessor" />


	<camelContext
		xmlns="http://camel.apache.org/schema/spring">

		<route id="demand-forecast-contract">
			<from uri="timer://demandForecastContractRequest?repeatCount=1" />

			<log
				message="### DENAMD FORECAST - Initiating request for Contract ###" />

			<setProperty name="artifactUri">
				<constant>https://catalyst.tmf/ran-slicing/demand-forecast</constant>
			</setProperty>
			<process ref="TMFArtifactInitProcessor" />

			<log
				message="### DENAMD FORECAST - Requesting to 'request for contract' ###" />
			<process ref="ContractRequestCreationProcessor" />
			<to
				uri="idscp2client://csp:29292?awaitResponse=true&amp;connectionShareId=dfConnection&amp;sslContextParameters=#sslContext&amp;useIdsMessages=true" />

			<process ref="TypeExtractionProcessor" />
			<choice>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ContractRequestMessage'</simple>

					<log
						message="### DENAMD FORECAST - Handling Contract Request Message ###" />
					<setProperty name="containerUri">
						<constant>https://hub.docker.com/layers/ashokkumarta/csp-resource-management/latest/images/sha256-5a5e65bcc27615011d2e598da05bb2a49b5168acd949e0a9555f79704cf6f291#9001</constant>
					</setProperty>
					<process ref="ContractRequestProcessor" />
					<to
						uri="idscp2client://csp:29292?awaitResponse=true&amp;connectionShareId=dfConnection&amp;sslContextParameters=#sslContext&amp;useIdsMessages=true" />

					<process ref="TypeExtractionProcessor" />
					<choice>
						<when>
							<simple>${exchangeProperty.ids-type} == 'ContractAgreementMessage'</simple>
							<log
								message="### DENAMD FORECAST - Handling Contract Agreement Message ###" />
							<!-- Only processing of incoming request must be performed, no reply -->
							<process ref="ContractAgreementReceiverProcessor" />
							<removeHeader headerName="idscp2-header" />
							<setBody>
								<simple>${null}</simple>
							</setBody>
						</when>
						<otherwise>
							<log loggingLevel="ERROR"
								message="### DENAMD FORECAST - Server expected ContractAgreementMessage but received unexpected message (otherwise branch):\n${body}\n### Header: ###\n${headers[idscp2-header]}" />
							<removeHeader headerName="idscp2-header" />
							<setBody>
								<simple>${null}</simple>
							</setBody>
						</otherwise>
					</choice>
				</when>
				<otherwise>
					<log loggingLevel="ERROR"
						message="### DENAMD FORECAST - Server received unexpected message (otherwise branch):\n${body}\n### Header: ###\n${headers[idscp2-header]}" />
					<removeHeader headerName="idscp2-header" />
					<setBody>
						<simple>${null}</simple>
					</setBody>
				</otherwise>
			</choice>

		</route>
		
		<route id="demand-forecast">
			<from
				uri="timer://demandForecastTimer?fixedRate=true&amp;period=30000&amp;delay=30000" />

			<log
				message="### DENAMD FORECAST - Initiating demand forecast push ###" />
			<setProperty name="artifactUri">
				<constant>https://catalyst.tmf/ran-slicing/demand-forecast</constant>
			</setProperty>

			<process ref="ArtifactRequestCreationProcessor" />
			<log
				message="### DENAMD FORECAST - Sending request to 'request for demand forecast' ###" />

			<to
				uri="idscp2client://csp:29292?awaitResponse=true&amp;connectionShareId=dfConnection&amp;sslContextParameters=#sslContext&amp;useIdsMessages=true" />
			<process ref="TypeExtractionProcessor" />
			<choice>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ArtifactRequestMessage'</simple>
					<log
						message="### DENAMD FORECAST - Received 'request for demand forecast' ###" />

					<log
						message="DENAMD FORECAST - Generating demand forecast from subscriber-1-demand-forecast..." />

					<to uri="http://subscriber-1-demand-forecast-app:9101?awaitResponse=true" />

					<log
						message="DENAMD FORECAST - Pushing demand forecast as payload in IDS response..." />
					<setProperty name="tmf_content_pay_load">
						<simple>${bodyAs(String)}</simple>
					</setProperty>

					<setProperty name="artifactUri">
						<constant>https://catalyst.tmf/ran-slicing/demand-forecast</constant>
					</setProperty>

					<process ref="TMFArtifactResponseProcessor" />
					<log
						message="DENAMD FORECAST - Sending demand forecast to CSP:\n\n${body}" />
					<to
						uri="idscp2client://csp:29292?connectionShareId=dfConnection&amp;sslContextParameters=#sslContext&amp;useIdsMessages=true" />

					<log
						message="DENAMD FORECAST - Demand forecast sent to CSP successfully" />
				</when>
				<otherwise>
					<log loggingLevel="ERROR"
						message="DENAMD FORECAST - Expected ArtifactResponseMessage, but received:\n${body}\n### Header: ###\n${headers[idscp2-header]}" />
				</otherwise>
			</choice>
		</route>


		<route id="load-optimizer-contract">
			<from
				uri="timer://loadOptimizerContractRequest?repeatCount=1" />
			<log message="### LOAD OPTIMIZER - Initiating contract ###" />

			<setProperty name="artifactUri">
				<constant>https://catalyst.tmf/ran-slicing/load-optimizer</constant>
			</setProperty>
			<process ref="TMFArtifactInitProcessor" />
			
			<process ref="ContractRequestCreationProcessor" />
			<to
				uri="idscp2client://csp:29293?awaitResponse=true&amp;connectionShareId=loConnection&amp;sslContextParameters=#sslContext&amp;useIdsMessages=true" />
			<process ref="TypeExtractionProcessor" />
			<choice>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ContractResponseMessage'</simple>
					<log
						message="### LOAD OPTIMIZER - Handling Contract Response ###" />
					<process ref="ContractResponseProcessor" />
					<to
						uri="idscp2client://csp:29293?connectionShareId=loConnection&amp;sslContextParameters=#sslContext&amp;useIdsMessages=true" />
				</when>
				<otherwise>
					<log loggingLevel="ERROR"
						message="LOAD OPTIMIZER - Expected ContractResponseMessage, but received:\n${body}\n### Header: ###\n${headers[idscp2-header]}" />
					<removeHeader headerName="idscp2-header" />
					<setBody>
						<simple>${null}</simple>
					</setBody>
				</otherwise>
			</choice>
		</route>

		<route id="load-optimizer">
			<from
				uri="timer://recommendationIncentiveTimer?fixedRate=true&amp;period=120000&amp;delay=120000" />

			<log
				message="LOAD OPTIMIZER - Requesting for load optimized allocation..." />
			<setProperty name="artifactUri">
				<constant>https://catalyst.tmf/ran-slicing/load-optimizer</constant>
			</setProperty>

			<process ref="ArtifactRequestCreationProcessor" />
			<to
				uri="idscp2client://csp:29293?awaitResponse=true&amp;connectionShareId=loConnection&amp;sslContextParameters=#sslContext&amp;useIdsMessages=true" />
			<process ref="TypeExtractionProcessor" />
			<choice>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ArtifactResponseMessage'</simple>
					<log
						message="LOAD OPTIMIZER - Received Allocation details from CSP\n\n${body}" />

					<!-- Process the recommendation -->
					<log
						message="LOAD OPTIMIZER - Processing the Allocation details received..." />

					<setHeader name="CamelHttpMethod">
						<constant>POST</constant>
					</setHeader>
					<setHeader name="content-type">
						<simple>text/plain</simple>
					</setHeader>
					<to
						uri="http://subscriber-1-optimizer-feedback-app:9102?awaitResponse=true" />
					<log message="LOAD OPTIMIZER - Proecssing complete." />

					<log message="LOAD OPTIMIZER - Applied successfully" />
					<!-- Set body to null after data transfer -->
					<removeHeader headerName="idscp2-header" />
					<setBody>
						<simple>${null}</simple>
					</setBody>
				</when>
				<otherwise>
					<log loggingLevel="ERROR"
						message="LOAD OPTIMIZER - Expected ArtifactResponseMessage, but received:\n${body}\n### Header: ###\n${headers[idscp2-header]}" />
				</otherwise>
			</choice>
		</route>


		<route id="ran-slice-allocation-contract">
			<from
				uri="timer://ranSliceAllocationContractRequest?repeatCount=1" />
			<log message="### RAN SLICE ALLOCATION - Initiating contract ###" />

			<setProperty name="artifactUri">
				<constant>https://catalyst.tmf/ran-slicing/ran-slice-allocation</constant>
			</setProperty>
			<process ref="TMFArtifactInitProcessor" />
			
			<process ref="ContractRequestCreationProcessor" />
			<to
				uri="idscp2client://csp:29294?awaitResponse=true&amp;connectionShareId=rsaConnection&amp;sslContextParameters=#sslContext&amp;useIdsMessages=true" />
			<process ref="TypeExtractionProcessor" />
			<choice>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ContractResponseMessage'</simple>
					<log
						message="### RAN SLICE ALLOCATION - Handling Contract Response ###" />
					<process ref="ContractResponseProcessor" />
					<to
						uri="idscp2client://csp:29293?connectionShareId=rsaConnection&amp;sslContextParameters=#sslContext&amp;useIdsMessages=true" />
				</when>
				<otherwise>
					<log loggingLevel="ERROR"
						message="RAN SLICE ALLOCATION - Expected ContractResponseMessage, but received:\n${body}\n### Header: ###\n${headers[idscp2-header]}" />
					<removeHeader headerName="idscp2-header" />
					<setBody>
						<simple>${null}</simple>
					</setBody>
				</otherwise>
			</choice>
		</route>

		<route id="ran-slice-allocation">
			<from
				uri="timer://ranSliceAllocationTimer?fixedRate=true&amp;period=150000&amp;delay=120000" />

			<log
				message="RAN SLICE ALLOCATION - Requesting for ran slice allocation status..." />
			<setProperty name="artifactUri">
				<constant>https://catalyst.tmf/ran-slicing/ran-slice-allocation</constant>
			</setProperty>

			<process ref="ArtifactRequestCreationProcessor" />
			<to
				uri="idscp2client://csp:29293?awaitResponse=true&amp;connectionShareId=rsaConnection&amp;sslContextParameters=#sslContext&amp;useIdsMessages=true" />
			<process ref="TypeExtractionProcessor" />
			<choice>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ArtifactResponseMessage'</simple>
					<log
						message="RAN SLICE ALLOCATION - Received ran slice allocataion details from CSP\n\n${body}" />

					<!-- Process the recommendation -->
					<log
						message="RAN SLICE ALLOCATION - Processing the ran slice allocataion details received..." />

					<setHeader name="CamelHttpMethod">
						<constant>POST</constant>
					</setHeader>
					<setHeader name="content-type">
						<simple>text/plain</simple>
					</setHeader>
					<to
						uri="http://subscriber-1-allocation-confirmation-app:9103?awaitResponse=true" />
					<log message="RAN SLICE ALLOCATION - Status proecssing complete." />

					<log message="RAN SLICE ALLOCATION - Status updated successfully" />
					<!-- Set body to null after data transfer -->
					<removeHeader headerName="idscp2-header" />
					<setBody>
						<simple>${null}</simple>
					</setBody>
				</when>
				<otherwise>
					<log loggingLevel="ERROR"
						message="RAN SLICE ALLOCATION - Expected ArtifactResponseMessage, but received:\n${body}\n### Header: ###\n${headers[idscp2-header]}" />
				</otherwise>
			</choice>
		</route>


	</camelContext>
</beans>
